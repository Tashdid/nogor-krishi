<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:security="http://www.springframework.org/schema/security"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<import resource="common-security.xml"/>
	
	<!-- Unsecured pages -->
	<security:http pattern="/logout" security="none" />
	
	<!-- Enable auto-wiring -->
	<context:annotation-config/>
	
	<!-- Scan for auto-wiring classes in spring saml packages -->
	<context:component-scan base-package="org.springframework.security.saml"/>

	<!-- Secured pages -->
	<security:http pattern="/saml/**" entry-point-ref="samlEntryPoint">
		<security:csrf disabled="true"/>
		<security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
		<security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
	</security:http>

	<!-- Secured pages with SAML as entry point -->
	<security:http entry-point-ref="samlEntryPoint">
		<security:intercept-url pattern="/**" access="isAuthenticated()"/>
		<security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
		<security:headers/>
		<security:csrf/>
	</security:http>

	<bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant">
			<security:filter-chain pattern="/saml/login/**" filters="samlEntryPoint"/>
			<security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
			<security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
			<security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
			<security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
			<security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
			<security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
		</security:filter-chain-map>
	</bean>

	<!-- Handler deciding where to redirect user after successful login -->
	<bean id="successRedirectHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="alwaysUseDefaultTargetUrl" value="true"/>
		<property name="defaultTargetUrl" value="/authenticated"/>
	</bean>

	<!-- Handler deciding where to redirect user after failed login -->
	<bean id="failureRedirectHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<constructor-arg value="/authfail"/>
	</bean>

	<!-- Handler for successful logout -->
	<bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<property name="defaultTargetUrl" value="/logout"/>
	</bean>

	<!-- Register authentication manager with SAML provider -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="samlAuthenticationProvider"/>
	</security:authentication-manager>

	<!-- Logger for SAML messages and events -->
	<bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
		<property name="logMessages" value="true"/>
	</bean>

	<!-- Central storage of cryptographic keys -->
	<bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
		<constructor-arg value="#{appConfig.props.getProperty('saml2.jks.file')}"/>
		<constructor-arg type="java.lang.String" value="#{appConfig.props.getProperty('saml2.jks.pass')}"/>
		<constructor-arg>
			<map>
				<entry key="#{appConfig.props.getProperty('saml2.jks.passm.key')}" value="#{appConfig.props.getProperty('saml2.jks.passm.val')}"/>
			</map>
		</constructor-arg>
		<constructor-arg type="java.lang.String" value="#{appConfig.props.getProperty('saml2.jks.key')}"/>
	</bean>

	<!-- Entry point to initialize authentication, default values taken from properties file -->
	<bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
		<property name="defaultProfileOptions">
			<bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<property name="includeScoping" value="false"/>
			</bean>
		</property>
	</bean>

	<!-- IDP Discovery Service -->
	<bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
		<property name="idpSelectionPath" value="/WEB-INF/security/idpSelection.jsp"/>
	</bean>

	<!-- Filter automatically generates default SP metadata -->
	<bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
		<constructor-arg>
			<ref bean="metadatagenerator"/>
		</constructor-arg>
	</bean>

	<!-- The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metadata there -->
	<bean id="metadataDisplayFilter" class="org.springframework.security.saml.metadata.MetadataDisplayFilter"/>

	<bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
		<constructor-arg>
			<list>
				<ref bean="metadataprovider"/>
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML Authentication Provider responsible for validating of received SAML messages -->
	<bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider"/>

	<!-- Provider of default SAML Context -->
	<bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl"/>

	<!-- Processing filter for WebSSO profile messages -->
	<bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
		<property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
	</bean>

	<!-- Processing filter for WebSSO Holder-of-Key profile -->
	<bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager"/>
		<property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
		<property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
	</bean>

	<!-- Logout handler terminating local session -->
	<bean id="logoutHandler"
		  class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="false"/>
	</bean>

	<!-- Override default logout processing filter with the one processing SAML messages -->
	<bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
		<constructor-arg ref="successLogoutHandler"/>
		<constructor-arg ref="logoutHandler"/>
		<constructor-arg ref="logoutHandler"/>
	</bean>

	<!-- Filter processing incoming logout messages -->
	<!-- First argument determines URL user will be redirected to after successful global logout -->
	<bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
		<constructor-arg ref="successLogoutHandler"/>
		<constructor-arg ref="logoutHandler"/>
	</bean>

	<!-- Class loading incoming SAML messages from httpRequest stream -->
	<bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
		<constructor-arg>
			<list>
				<ref bean="redirectBinding"/>
				<ref bean="postBinding"/>
				<ref bean="artifactBinding"/>
				<ref bean="soapBinding"/>
				<ref bean="paosBinding"/>
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML 2.0 WebSSO Assertion Consumer -->
	<bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
		<property name="maxAuthenticationAge" value="#{appConfig.props.getProperty('saml2.maxauthenticationage', '7200')}"/>
	</bean>

	<!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
	<bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

	<!-- SAML 2.0 Web SSO profile -->
	<bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>

	<!-- SAML 2.0 Holder-of-Key Web SSO profile -->
	<bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

	<!-- SAML 2.0 ECP profile -->
	<bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

	<!-- SAML 2.0 Logout Profile -->
	<bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

	<!-- Bindings, encoders and decoders used for creating and parsing messages -->
	<bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
		<constructor-arg ref="parserPool"/>
		<constructor-arg ref="samlVelocityEngine"/>
	</bean>

	<bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
		<constructor-arg ref="parserPool"/>
	</bean>

	<bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
		<constructor-arg ref="parserPool"/>
		<constructor-arg ref="samlVelocityEngine"/>
		<constructor-arg>
			<bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
				<constructor-arg>
					<bean class="org.apache.commons.httpclient.HttpClient">
						<constructor-arg>
							<bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
						</constructor-arg>
					</bean>
				</constructor-arg>
				<property name="processor">
					<bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
						<constructor-arg ref="soapBinding"/>
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
		<constructor-arg ref="parserPool"/>
	</bean>

	<bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
		<constructor-arg ref="parserPool"/>
	</bean>

	<!-- Initialization of OpenSAML library-->
	<bean class="org.springframework.security.saml.SAMLBootstrap"/>

	<!-- Initialization of the velocity engine -->
	<bean id="samlVelocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine"/>

	<!-- XML parser pool needed for OpenSAML parsing -->
	<bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" scope="singleton" init-method="initialize"/>
	<bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder" scope="singleton"/>

	<beans profile="!prod">
		<bean id="metadataprovider" class="org.opensaml.saml2.metadata.provider.HTTPMetadataProvider">
			<constructor-arg>
				<value type="java.lang.String">http://idp.ssocircle.com/idp-meta.xml</value>
			</constructor-arg>
			<constructor-arg>
				<value type="int">5000</value>
			</constructor-arg>
			<property name="parserPool" ref="parserPool"/>
		</bean>
		<bean id="metadatagenerator" class="org.springframework.security.saml.metadata.MetadataGenerator">
			<property name="extendedMetadata">
				<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
					<property name="signMetadata" value="false" />
				</bean>
			</property>
		</bean>
	</beans>
	<beans profile="prod">
		<bean id="metadataprovider" class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
			<constructor-arg>
				<bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
					<constructor-arg>
						<value type="java.io.File">#{appConfig.props.getProperty('saml2.idpmetadatafile')}</value>
					</constructor-arg>
					<property name="parserPool" ref="parserPool"/>
				</bean>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
			</constructor-arg>
			<property name="metadataTrustCheck" value="false"/>
		</bean>
		<bean id="metadatagenerator" class="org.springframework.security.saml.metadata.MetadataGenerator">
			<property name="entityId" value="#{appConfig.props.getProperty('saml2.entityid')}"/>
			<property name="entityBaseURL" value="#{appConfig.props.getProperty('saml2.entitybaseurl')}"/>
		</bean>
	</beans>
	<beans>
		<bean class="com.metafour.netcourier.service.saml2.NCSAMLUserDetailsServiceImpl"/> 
	</beans>
</beans>